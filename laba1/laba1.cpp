/*
1) strlen - std::string::length()

2) strcpy - нет аналога

3) strcmp - нет аналога

4) strcat - someString.append

5) someString[index] - someString.at(index) (getting the character at index)
в C++ можно использовать оператор [] для доступа к символу строки по индексу. Например:
std::string str = "Hello, world!";
char character = str[index];

6) stract - push_back

7) нет аналога - pop_back
Однако, вы можете использовать индексацию и присвоение символу '\0' для удаления символа в конце строки.


Функции могут не иметь точного аналога в библиотеке другого языка. Почему? – объясните главную разницу строк в С и С++

1) Различные наборы функций: Язык программирования C и C++ имеют свои собственные наборы функций и стандартные библиотеки, которые могут различаться.

2)Переносимость кода: Некоторые функции могут отсутствовать в другом языке программирования из-за различий в философии языка или его экосистеме.
Каждый язык имеет свои собственные особенности и способы выполнения операций, и это может приводить к разнообразию функций в разных языках.

3)Интерфейсы классов: Строки в C обычно представлены как массивы символов (char[]), а в C++ имеется класс std::string.
Класс std::string выполнять различные операции со строками, используя функции-члены класса, а не отдельные функции.
В результате, некоторые функции из C могут быть заменены методами класса std::string.


Главная разница строк в С и С++:
C использует массивы символов для представления строк, а C++ предоставляет класс std::string, который облегчает работу со строками


Б) Теперь напишите программу на С++, которая будет сортировать буквы в алфавитном порядке в
	веденной пользователем строке.Причем программа должна удалять пробелы и пунктуационные
	знаки.
	NB: Используйте только библиотеку <string>.
*/

//#include <iostream>
//#include <string>
//#include <algorithm>
//
//using namespace std;
//
//int main() {
//	string input;
//	cout << "Print the line: ";
//	getline(cin, input);
//
//	// Удаление пробелов и пунктуационных знаков из строки
//	string cleanedInput;
//	for (char character_storage : input) {
//		if (isalpha(character_storage)) {
//			cleanedInput += tolower(character_storage);
//		}
//	}
//
//	// Сортировка букв в алфавитном порядке
//	sort(cleanedInput.begin(), cleanedInput.end());
//
//	cout << "sorting strings: " << cleanedInput << std::endl;
//
//	return 0;
//